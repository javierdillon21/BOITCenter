import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import Header from "../../../components/header";
import { ChangeEvent, useEffect, useState } from "react";
import { estadosVulnerabilidad } from "@/utils/functions";
import { useRouter } from "next/router";
import {
  getVulnerabilidadFromInforme,
  updatePropsVulnerabilidad,
} from "@/utils/postgresql";
import Alert, { AlertTypes } from "../../../components/alert";

export default function Vulnerabilidad() {
  const router = useRouter();
  const [alert, setAlert] = useState<AlertProps | null>();
  const [isEditable, setIsEditable] = useState(false);
  const [selectedState, setSelectedState] = useState<string>();
  const [observacion, setObservacion] = useState<string>();
  const [data, setData] = useState<{
    id_informe: string;
    cve: string;
    descripcion: string;
    equipo: string;
    estado: string;
    id: string;
    id_equipo: string;
    mitigacion_sugerida: string;
    nombre: string;
    observacion: string;
    referencia: string;
    informe_estado: string;
  }>();

  const toggleEditMode = () => {
    setIsEditable(!isEditable);
  };
  const handleStateValue = (e: ChangeEvent<HTMLSelectElement>) => {
    const selectedState = e.target.value;
    setSelectedState(selectedState);
  };

  const handleAction = () => {
    // Aquí puedes realizar la acción con los registros seleccionados
    console.log("Actualizado");
    updatePropsVulnerabilidad("updatePropsVulnerabilidad", {
      id_vulnerabilidad: router.query.id as string,
      id_informe: data?.id_informe as string,
      estado: selectedState as string,
      observacion: observacion as string,
    }).then((res) => {
      if (res.message) {
        setAlert({
          text: "Actualizado exitosamente",
          type: AlertTypes.success,
        });

        setTimeout(() => {
          router.reload();
        }, 3000);
      } else
        setAlert({
          text: "Error al actualizar la información",
          type: AlertTypes.error,
        });
    });
  };

  useEffect(() => {
    if (isEditable) {
      setObservacion(data?.observacion);
      setSelectedState(data?.estado);
    } else {
      setSelectedState("");
    }
  }, [isEditable]);

  useEffect(() => {
    if (router.isReady) {
      getVulnerabilidadFromInforme(router.query.id as string).then(
        (response) => {
          setData(response.data);
          console.log(response.data);
        }
      );
    }
  }, [router]);

  if (!router.isReady || !data)
    return (
      <div className="flex flex-col border flex-1 justify-center items-center font-bold text-sm text-gray-700">
        <span className="loading loading-bars loading-lg"></span>
        Cargando datos
      </div>
    );
  return (
    <main className="flex flex-1 flex-col p-4 md:p-6 font-normal w-full">
      <Header
        title={`${router.query.informe}`}
        subtitle={`${data?.nombre}`}
      ></Header>
      {alert && <Alert text={alert.text} type={alert.type}></Alert>}

      {data.informe_estado!=="Entregado" &&(<div className="flex justify-between w-3/4 min-w-96 self-center mb-2">
        <span id="toggle_mode" className="flex items-center p-1 gap-2 ">
          <FontAwesomeIcon
            icon="eye"
            className={`${isEditable ? "text-gray-400" : ""}`}
          ></FontAwesomeIcon>
          <input
            type="checkbox"
            className="toggle toggle-sm"
            onChange={toggleEditMode}
          />
          <FontAwesomeIcon
            icon="pen"
            className={`${isEditable ? "" : "text-gray-400"}`}
          ></FontAwesomeIcon>
        </span>

        {isEditable && (
          <button
            onClick={handleAction}
            className={`btn btn-outline btn-xs w-24 ${
              selectedState && observacion ? "" : "btn-disabled"
            }`}
            disabled={alert?.type === AlertTypes.success ? true : false}
          >
            Actualizar
          </button>
        )}
      </div>)}

      <section className="grid grid-cols-[200px_1fr] p-3 gap-y-2 self-center gap-x-0 border text-sm w-3/4 min-w-96 shadow-sm rounded">
        <p>Nombre</p>
        <p className="font-medium">{data?.nombre}</p>
        <p>Equipo</p>
        <p className="font-medium">{data?.equipo}</p>
        <p>CVE</p>
        <p className="font-medium">{data?.cve}</p>
        <p>Descripción</p>
        <p className="font-medium">{data?.descripcion}</p>
        <p>Mitigación sugerida</p>
        <p className="font-medium">{data?.mitigacion_sugerida}</p>
        <p>Referencias</p>
        <p className="font-medium">{data?.referencia}</p>
        <p>Estado</p>
        {isEditable ? (
          <select
            className="flex select select-bordered select-xs w-56"
            onChange={(e) => handleStateValue(e)}
            defaultValue={data?.estado}
          >
            <option disabled>Seleccione un estado</option>
            {estadosVulnerabilidad.map((estado, i) => {
              return (
                <option
                  id={`ID-${estado}`}
                  key={`state-${estado}-vulnerabilidad-${i}`}
                >
                  {estado}
                </option>
              );
            })}
          </select>
        ) : (
          <p className="badge badge-outline font-medium">{data?.estado}</p>
        )}

        <p>Observación</p>

        {isEditable ? (
          <textarea
            placeholder="Escriba las observaciones"
            className="textarea textarea-bordered textarea-xs w-full  font-medium"
            onChange={(e) => setObservacion(e.target.value)}
            defaultValue={data?.observacion}
          ></textarea>
        ) : (
          <p className="font-medium">{data?.observacion || "-"}</p>
        )}
      </section>
    </main>
  );
}
